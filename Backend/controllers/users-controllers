const { validationResult } = require('express-validator');

const User = require('../models/user');
// const bcrypt = require('bcryptjs');
// const jwt= require('jsonwebtoken');

// const getUsers = async (req, res, next) => {
//   let users;
//   try {
//     users = await User.find({}, '-password');
//   } catch (err) {
//     return res.status(500).json( { message: 'Fetching places has failed, please try again later'  });
//   }
//   res.json({ users: users.map(user => user.toObject({ getters: true })) });
// };


const signup = async (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(422).json( { message: 'Invalid inputs please try again'  });
  }
  const { firstName, lastName, email, userName, password} = req.body;

  let existingUser;
  try {
    existingUser = await User.findOne({ email: email });
  } catch (err) {
    return res.status(500).json( { message: 'Signup failed, please try again later'  });
  }

  if (existingUser) {
    return res.status(422).json( { message: 'User already exists'  });
  }

  //STEP 1: lets add the image that is uploaded when creating (registering) a new User
  const createdUser = new User({
    firstName,
    lastName,
    email,
    userName,
    password 
  });

  try {
    await createdUser.save();
  } catch (err) {
    return res.status(500).json( { message:  err.message  });
  }
  res.status(200).json({ user: createdUser.toObject({ getters: true }) });
};

const login = async (req, res, next) => {
  const { userName, password } = req.body;
  // console.log(userName);
  // console.log(password);

  let existingUser;

  try {
    existingUser = await User.findOne({ userName: userName });
  } catch (err) {
    return res.status(500).json( { message: 'Login failed'  });
  }
  // console.log(existingUser);
  if (!existingUser || existingUser.password !== password) {
    return res.status(422).json( { message: 'Invalid credentials'  });
  }

  res.status(200).json({ message: 'Logged in!' });
};

module.exports  = { signup, login };

