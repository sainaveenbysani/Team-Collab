const { validationResult } = require('express-validator');

const User = require('../models/user');
const bcrypt = require('bcryptjs');
const jwt= require('jsonwebtoken');

// const getUsers = async (req, res, next) => {
//   let users;
//   try {
//     users = await User.find({}, '-password');
//   } catch (err) {
//     return res.status(500).json( { message: 'Fetching places has failed, please try again later'  });
//   }
//   res.json({ users: users.map(user => user.toObject({ getters: true })) });
// };


const signup = async (req, res, next) => {
//   const errors = validationResult(req);
//   if (!errors.isEmpty()) {
//     return res.status(422).json( { message: 'Invalid inputs please try again'  });
//   }
  const { username, email, password, profilepic } = req.body;

  let existingUser;
  try {
    existingUser = await User.findOne({ email: email });
  } catch (err) {
    return res.status(500).json( { message: 'Signup failed, please try again later'  });
  }

  if (existingUser) {
    return res.status(422).json( { message: 'User already exists'  });
  }

  let hashedPassword;
  try{
    hashedPassword = await bcrypt.hash(password,12);
  }
  catch(err){
    return res.status(500).json({message : 'Could not create user, please try again'});
  }

  //STEP 1: lets add the image that is uploaded when creating (registering) a new User
  const createdUser = new User({
    username,
    email,
    profilepic: req.file.path,
    password: hashedPassword, 
  });

  try {
    await createdUser.save();
  } catch (err) {
    return res.status(500).json( { message:  err.message  });
  }

  let token;
  try{
    token=jwt.sign({
      userId : createdUser.userId,
      email:createdUser.email
    },'secret_key_do_not_share',{expiresIn:'1hr'});
  }
  catch(err){
    return res.status(500).json({message : 'Could not create user'});
  }

  return res.json({
    userId : createdUser.userId,
    email:createdUser.email,
    token:token
  })
  //res.status(201).json({ user: createdUser.toObject({ getters: true }) }); // createdUser includes the PW
};

const login = async (req, res, next) => {
  const { email, password } = req.body;

  let existingUser;

  try {
    existingUser = await User.findOne({ email: email });
  } catch (err) {
    return res.status(500).json( { message: 'Login failed'  });
  }

  let isValidPassword = false;
  
  try{
    isValidPassword = await bcrypt.compare(password,existingUser.password );
  }
  catch(err){
    return res.status(500).json({message : 'InValid Password'});
  }

 if (!isValidPassword) {
    return res.status(422).json( { message: 'Invalid credentials' });
  } 
  let token;
  try{
    token=jwt.sign({
      userId : existingUser.userId,
      email:existingUser.email
    },'secret_key_do_not_share',{expiresIn:'1hr'});
  }
  catch(err){
    return res.status(500).json({message : 'Could not create user'});
  }

  return res.status(201).json({
    userId : existingUser.userId,
    email:existingUser.email,
    token:token
  })
  //return res.json({ message: 'Logged in!' });
};

module.exports  = { signup, login };

